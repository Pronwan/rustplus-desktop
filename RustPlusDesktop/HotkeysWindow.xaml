<Window x:Class="RustPlusDesk.Views.HotkeysWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Hotkeys"
        Width="640" Height="420"
        WindowStartupLocation="CenterOwner"
        ResizeMode="NoResize"
        Background="{DynamicResource AppBg}">

    <!-- Lokale Styles auf Basis deiner Palette -->
    <Window.Resources>
        <!-- Palette -->
        <SolidColorBrush x:Key="AppBg"         Color="#121417"/>
        <SolidColorBrush x:Key="Surface"       Color="#1C1F24"/>
        <SolidColorBrush x:Key="SurfaceAlt"    Color="#23272E"/>
        <SolidColorBrush x:Key="CardBorder"    Color="#33414850"/>
        <SolidColorBrush x:Key="Accent"        Color="#4FC3F7"/>
        <SolidColorBrush x:Key="AccentDark"    Color="#FF1E576F"/>

        <SolidColorBrush x:Key="TextPrimary"   Color="#ECEFF1"/>
        <SolidColorBrush x:Key="TextSubtle"    Color="#B0BEC5"/>
        <CornerRadius    x:Key="Radius">10</CornerRadius>

        <!-- ========== TAB STYLES (einfügen in <Window.Resources>) ========== -->
        <SolidColorBrush x:Key="CardBrush" Color="#171A21"/>
        <SolidColorBrush x:Key="CardBorderBrush" Color="#222734"/>
        <SolidColorBrush x:Key="PrimaryBrush" Color="#4C8BF5"/>
        <SolidColorBrush x:Key="PrimaryBrushMuted" Color="#375FA8"/>
        <SolidColorBrush x:Key="TextBrush" Color="#E8ECF3"/>
        <SolidColorBrush x:Key="TextBrushMuted" Color="#AAB6CF"/>
        <!-- Card-Container -->
        <Style x:Key="CardBorderStyle" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource Surface}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="{DynamicResource Radius}"/>
            <Setter Property="Padding" Value="12"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
        </Style>

        <!-- Headline + Subline -->
        <Style x:Key="H1" TargetType="TextBlock">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
        </Style>
        <Style x:Key="Subtle" TargetType="TextBlock">
            <Setter Property="Foreground" Value="{DynamicResource TextSubtle}"/>
            <Setter Property="FontSize" Value="12"/>
        </Style>

        <!-- Buttons -->
        <Style x:Key="AccentButton" TargetType="Button">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Background" Value="{DynamicResource AccentDark}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="8,6"/>
            <Setter Property="MinWidth" Value="120"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{DynamicResource Radius}">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Margin="4,1,4,2"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource Accent}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="GhostTiny" TargetType="Button">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Background" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="6,4"/>
            <Setter Property="MinWidth" Value="56"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="6">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- DataGrid Dark -->
        <Style TargetType="DataGrid">
            <Setter Property="Background" Value="{DynamicResource Surface}"/>
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="RowBackground" Value="{DynamicResource Surface}"/>
            <Setter Property="AlternationCount" Value="2"/>
            <Setter Property="AlternatingRowBackground" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="GridLinesVisibility" Value="None"/>
            <Setter Property="HeadersVisibility" Value="Column"/>
            <Setter Property="RowHeight" Value="32"/>
            <Setter Property="ColumnHeaderHeight" Value="34"/>
            <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="SelectionMode" Value="Single"/>
            <Setter Property="SelectionUnit" Value="FullRow"/>
        </Style>

        <Style TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="Foreground" Value="{DynamicResource TextSubtle}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
        </Style>

        <Style TargetType="DataGridRow">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Margin" Value="0,0,0,1"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource AccentDark}"/>
                    <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>

    <Grid Margin="16">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <StackPanel Orientation="Vertical" Margin="0,0,0,8">
            <TextBlock Text="Hotkeys" Style="{StaticResource H1}"/>
            <TextBlock Text="Assign global hotkeys to Smart Switches. Multiple devices can share one hotkey (will toggle sequentially)."
                       Style="{StaticResource Subtle}" Margin="0,2,0,0"/>
        </StackPanel>

        <!-- Card mit Grid -->
        <Border Grid.Row="1" Style="{StaticResource CardBorderStyle}">
            <DataGrid x:Name="GridDevices"
                      HeadersVisibility="Column"
                      AutoGenerateColumns="False"
                      CanUserAddRows="False"
                      CanUserDeleteRows="False"
                      ItemsSource="{Binding}">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Device" Binding="{Binding Display}" Width="2*"/>
                    <DataGridTextColumn Header="EntityId" Binding="{Binding EntityId}" Width="*"/>
                    <DataGridTextColumn Header="Hotkey" Binding="{Binding Hotkey}" Width="*" />
                    <DataGridTemplateColumn Header="" Width="160">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                    <Button Content="Set"   Width="64" Margin="0,0,6,0"
                                            Style="{StaticResource GhostTiny}"
                                            Click="BtnSet_Click"/>
                                    <Button Content="Clear" Width="64"
                                            Style="{StaticResource GhostTiny}"
                                            Click="BtnClear_Click"/>
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Border>

        <!-- Footer -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,12,0,0">
            <Button Content="Close &amp; Deactivate"
                    Width="150" Margin="0,0,8,0"
                    Style="{StaticResource GhostTiny}"
                    Click="BtnCloseDeactivate_Click"/>
            <Button Content="Close &amp; Activate"
                    Width="150" IsDefault="True"
                    Style="{StaticResource AccentButton}"
                    Click="BtnCloseActivate_Click"/>
        </StackPanel>
    </Grid>
</Window>