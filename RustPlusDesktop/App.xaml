<Application x:Class="RustPlusDesk.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Application.Resources>

        <!-- Palette -->
        <SolidColorBrush x:Key="AppBg"         Color="#121417"/>
        <SolidColorBrush x:Key="Surface"       Color="#1C1F24"/>
        <SolidColorBrush x:Key="SurfaceAlt"    Color="#23272E"/>
        <SolidColorBrush x:Key="CardBorder"    Color="#33414850"/>
        <SolidColorBrush x:Key="Accent"        Color="#4FC3F7"/>
        <SolidColorBrush x:Key="AccentDark"    Color="#FF1E576F"/>

        <SolidColorBrush x:Key="TextPrimary"   Color="#ECEFF1"/>
        <SolidColorBrush x:Key="TextSubtle"    Color="#B0BEC5"/>
        <CornerRadius    x:Key="Radius">10</CornerRadius>

        <Style TargetType="ToggleButton">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Background" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="4,2"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border x:Name="Bd"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{DynamicResource Radius}">
                            <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Surface}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="#4CAF50"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ToolTip">
            <Setter Property="Background" Value="#1C1F24"/>
            <Setter Property="Foreground" Value="#ECEFF1"/>
            <Setter Property="BorderBrush" Value="#33414850"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="6,4"/>
            <Setter Property="HasDropShadow" Value="True"/>
        </Style>

        <!-- ========== TAB STYLES (einfügen in <Window.Resources>) ========== -->
        <SolidColorBrush x:Key="CardBrush" Color="#171A21"/>
        <SolidColorBrush x:Key="CardBorderBrush" Color="#222734"/>
        <SolidColorBrush x:Key="PrimaryBrush" Color="#4C8BF5"/>
        <SolidColorBrush x:Key="PrimaryBrushMuted" Color="#375FA8"/>
        <SolidColorBrush x:Key="TextBrush" Color="#E8ECF3"/>
        <SolidColorBrush x:Key="TextBrushMuted" Color="#AAB6CF"/>

        <Style x:Key="PrettyTabControl" TargetType="{x:Type TabControl}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="True">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <!-- Genau EIN ItemsHost (TabPanel), ohne Kinder -->
                            <TabPanel x:Name="HeaderPanel"
                 Panel.ZIndex="1"
                 Grid.Row="0"
                 IsItemsHost="True"
                 Margin="8,8,8,0"/>

                            <!-- Inhalt -->
                            <Border Grid.Row="1"
               Background="{StaticResource CardBrush}"
               BorderBrush="{StaticResource CardBorderBrush}"
               BorderThickness="1"
               CornerRadius="14"
               Margin="8,0,8,8"
               Padding="12">
                                <ContentPresenter x:Name="PART_SelectedContentHost"
                           ContentSource="SelectedContent"/>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- HEADER-TEMPLATE: Border + Popup gemeinsam in einem Grid -->
        <ControlTemplate x:Key="DarkMenuItem_Header" TargetType="MenuItem">
            <Grid>
                <!-- <<< ein gemeinsames Root -->
                <Border x:Name="Bd"
             Background="{TemplateBinding Background}"
             CornerRadius="6"
             SnapsToDevicePixels="True"
             Padding="{TemplateBinding Padding}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="18"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="16"/>
                        </Grid.ColumnDefinitions>

                        <ContentPresenter Grid.Column="0"
                               VerticalAlignment="Center"
                               HorizontalAlignment="Center"
                               ContentSource="Icon"/>

                        <ContentPresenter Grid.Column="1"
                               Margin="0,0,6,0"
                               VerticalAlignment="Center"
                               RecognizesAccessKey="True"
                               ContentSource="Header"/>

                        <Path Grid.Column="2"
                   Data="M 0 0 L 4 4 L 0 8"
                   Stroke="{DynamicResource TextSubtle}"
                   StrokeThickness="1.5"
                   StrokeStartLineCap="Round"
                   StrokeEndLineCap="Round"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"/>
                    </Grid>
                </Border>

                <!-- Submenu-Popup -->
                <Popup x:Name="PART_Popup"
            Placement="Right"
            HorizontalOffset="0"
            VerticalOffset="0"
            IsOpen="{TemplateBinding IsSubmenuOpen}"
            AllowsTransparency="True"
            Focusable="False"
            StaysOpen="False">
                    <Border Background="{DynamicResource Surface}"
                 BorderBrush="{DynamicResource CardBorder}"
                 BorderThickness="1"
                 CornerRadius="{DynamicResource Radius}"
                 Padding="6"
                 SnapsToDevicePixels="True">
                        <ScrollViewer CanContentScroll="True">
                            <StackPanel IsItemsHost="True"/>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>

            <ControlTemplate.Triggers>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter TargetName="Bd" Property="Background" Value="#141A22"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource TextSubtle}"/>
                    <Setter TargetName="Bd" Property="Opacity" Value="0.6"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- ITEM-TEMPLATE (Leaf) bleibt ein einzelnes Root-Element, alles gut) -->
        <ControlTemplate x:Key="DarkMenuItem_Item" TargetType="MenuItem">
            <Border x:Name="Bd"
         Background="{TemplateBinding Background}"
         CornerRadius="6"
         SnapsToDevicePixels="True"
         Padding="{TemplateBinding Padding}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="16"/>
                    </Grid.ColumnDefinitions>

                    <ContentPresenter Grid.Column="0"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"
                           ContentSource="Icon"/>

                    <ContentPresenter Grid.Column="1"
                           Margin="0,0,6,0"
                           VerticalAlignment="Center"
                           RecognizesAccessKey="True"
                           ContentSource="Header"/>
                </Grid>
            </Border>

            <ControlTemplate.Triggers>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter TargetName="Bd" Property="Background" Value="#141A22"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource TextSubtle}"/>
                    <Setter TargetName="Bd" Property="Opacity" Value="0.6"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- STYLE: wählt automatisch das passende Template per Role
  + setzt Checked-Indikator als Accent-Punkt über Icon -->
        <Style x:Key="DarkMenuItem" TargetType="MenuItem">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="10,6"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template" Value="{StaticResource DarkMenuItem_Item}"/>
            <Style.Triggers>
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Template" Value="{StaticResource DarkMenuItem_Header}"/>
                </Trigger>
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="Template" Value="{StaticResource DarkMenuItem_Header}"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Icon">
                        <Setter.Value>
                            <Ellipse Width="8" Height="8" Fill="{DynamicResource Accent}"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Icon" Value="{x:Null}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- dunkler Separator -->
        <Style x:Key="DarkSeparator" TargetType="Separator">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Separator">
                        <Border Height="1" Background="#22FFFFFF" Margin="6,6,6,6"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- dunkles ContextMenu-Gehäuse -->
        <Style x:Key="DarkContextMenu" TargetType="ContextMenu">
            <Setter Property="Background" Value="{DynamicResource Surface}"/>
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="HasDropShadow" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ContextMenu">
                        <Border Background="{TemplateBinding Background}"
                     BorderBrush="{DynamicResource CardBorder}"
                     BorderThickness="1"
                     CornerRadius="{DynamicResource Radius}"
                     Padding="6"
                     SnapsToDevicePixels="True">
                            <StackPanel IsItemsHost="True"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- TabItem: echte „Reiter“-Optik mit eckigem Fuß, bündig zur Card -->
        <Style x:Key="PrettyTabItem" TargetType="TabItem">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="Padding" Value="14,8"/>
            <Setter Property="Margin" Value="0"/>
            <!-- kein Abstand zwischen Reitern -->
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <Border x:Name="TabHeader"
                     Background="#11151B"
                     BorderBrush="{StaticResource CardBorderBrush}"
                     BorderThickness="1,1,1,0"  
                         CornerRadius="10,10,0,0"
                         
                         Padding="12,6"
                     SnapsToDevicePixels="True">
                            <ContentPresenter ContentSource="Header"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="TabHeader" Property="Background" Value="#151A22"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Panel.ZIndex" Value="1"/>

                                <Setter TargetName="TabHeader" Property="Margin" Value="0,0,0,-1"/>
                                <Setter TargetName="TabHeader" Property="Background" Value="{StaticResource CardBrush}"/>
                                <Setter TargetName="TabHeader" Property="BorderBrush" Value="{StaticResource CardBorderBrush}"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.6"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Sekundär-Button (unten im Tab) -->
        <Style x:Key="GhostButton" TargetType="Button">
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="Background" Value="#141821"/>
            <Setter Property="BorderBrush" Value="{StaticResource CardBorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="12,6"/>
            <Setter Property="Margin" Value="8,0,0,0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="BtnBg" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="10">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="BtnBg" Property="Background" Value="#1A2130"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="BtnBg" Property="Background" Value="#0F1320"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.55"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Primär-Button (CHAT) -->
        <Style x:Key="PrimaryButton" BasedOn="{StaticResource GhostButton}" TargetType="Button">
            <Setter Property="Background" Value="{StaticResource PrimaryBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrushMuted}"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>

        <!-- ========= Ultra-Slim Scrollbars ========= -->
        <SolidColorBrush x:Key="ScrollbarTrackBrush" Color="#141820"/>
        <SolidColorBrush x:Key="ScrollbarThumbBrush" Color="#2C3548"/>
        <SolidColorBrush x:Key="ScrollbarThumbBrushHover" Color="#3A4663"/>
        <SolidColorBrush x:Key="ScrollbarThumbBrushActive" Color="#4C5A7A"/>

        <Style x:Key="SlimThumb" TargetType="{x:Type Thumb}">
            <Setter Property="Background" Value="{StaticResource ScrollbarThumbBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border x:Name="B" Background="{TemplateBinding Background}" CornerRadius="2"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="B" Property="Background" Value="{StaticResource ScrollbarThumbBrushHover}"/>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="True">
                                <Setter TargetName="B" Property="Background" Value="{StaticResource ScrollbarThumbBrushActive}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type ScrollBar}">
            <Setter Property="Background" Value="Transparent"/>
            <!-- wichtig, damit schmaler als Systembreite möglich -->
            <Setter Property="MinWidth" Value="0"/>
            <Setter Property="MinHeight" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid SnapsToDevicePixels="True">
                            <Border Background="{StaticResource ScrollbarTrackBrush}" CornerRadius="2"/>
                            <Track x:Name="PART_Track"
              Orientation="{TemplateBinding Orientation}"
              IsDirectionReversed="True" Focusable="False">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Opacity="0" IsHitTestVisible="False"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Opacity="0" IsHitTestVisible="False"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource SlimThumb}"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <!-- Breite/Höhe hier anpassen: 4 => super schlank; 2 => „hairline“ -->
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Width" Value="4"/>
                    <Setter Property="Margin" Value="0,2,2,2"/>
                </Trigger>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Height" Value="4"/>
                    <Setter Property="Margin" Value="2,0,2,2"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <!-- Default-Text -->
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
        </Style>
        <SolidColorBrush x:Key="CbBg"       Color="#202428"/>
        <SolidColorBrush x:Key="CbBorder"   Color="#5A6672"/>
        <SolidColorBrush x:Key="CbHover"    Color="#7F8A96"/>
        <SolidColorBrush x:Key="CbAccent"   Color="#62D38B"/>
        <SolidColorBrush x:Key="CbDisabled" Color="#334049"/>
        <SolidColorBrush x:Key="CbText"     Color="#EAEFF3"/>

        <SolidColorBrush x:Key="DonateYellow"        Color="#FFD166"/>
        <SolidColorBrush x:Key="DonateYellowHover"   Color="#FFDE89"/>
        <SolidColorBrush x:Key="DonateYellowPressed" Color="#FFBE4C"/>
        <SolidColorBrush x:Key="DonateTextDark"      Color="#1A1E22"/>

        <!-- Runde gelbe Accent-Button -->
        <Style x:Key="DonateButton" TargetType="Button">
            <Setter Property="Foreground"      Value="{StaticResource DonateTextDark}"/>
            <Setter Property="Background"      Value="{StaticResource DonateYellow}"/>
            <Setter Property="BorderBrush"     Value="#26000000"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding"         Value="10,6"/>
            <Setter Property="Cursor"          Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Bd"
             CornerRadius="10"
             Background="{TemplateBinding Background}"
             BorderBrush="{TemplateBinding BorderBrush}"
             BorderThickness="{TemplateBinding BorderThickness}"
             SnapsToDevicePixels="True">
                            <ContentPresenter HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         RecognizesAccessKey="True"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource DonateYellowHover}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource DonateYellowPressed}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Opacity" Value="0.6"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 🔘 Runde Checkbox mit Punkt -->
        <Style x:Key="DotCheckBox" TargetType="CheckBox">
            <Setter Property="Foreground" Value="{StaticResource CbText}"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Grid SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <!-- Bullet -->
                            <Grid Width="18" Height="18" Margin="0,0,8,0">
                                <!-- Rahmen-Kreis -->
                                <Ellipse x:Name="Circle"
                  Width="18" Height="18"
                  Stroke="{StaticResource CbBorder}"
                  StrokeThickness="2"
                  Fill="Transparent"/>
                                <!-- Punkt -->
                                <Ellipse x:Name="Dot"
                  Width="10" Height="10"
                  Fill="{StaticResource CbAccent}">
                                    <Ellipse.RenderTransform>
                                        <ScaleTransform x:Name="DotScale" ScaleX="0" ScaleY="0" CenterX="5" CenterY="5"/>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Grid>

                            <!-- Text/Content -->
                            <ContentPresenter Grid.Column="1"
                         VerticalAlignment="Center"
                         RecognizesAccessKey="True"/>

                            <!-- Visual States -->
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Circle"
                               Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
                               To="#7F8A96" Duration="0:0:0.08"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Circle"
                               Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
                               To="#334049" Duration="0:0:0"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                Storyboard.TargetProperty="ScaleX" To="0" Duration="0:0:0"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                Storyboard.TargetProperty="ScaleY" To="0" Duration="0:0:0"/>
                                            <DoubleAnimation Storyboard.TargetName="Circle"
                                Storyboard.TargetProperty="Opacity" To="0.6" Duration="0:0:0"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>

                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Unchecked"/>
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Circle"
                               Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
                               To="#62D38B" Duration="0:0:0.08"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                Storyboard.TargetProperty="ScaleX" To="1" Duration="0:0:0.10"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                Storyboard.TargetProperty="ScaleY" To="1" Duration="0:0:0.10"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Indeterminate">
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Circle"
                               Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)"
                               To="#62D38B" Duration="0:0:0.08"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                Storyboard.TargetProperty="ScaleX" To="1" Duration="0:0:0.10"/>
                                            <DoubleAnimation Storyboard.TargetName="DotScale"
                                Storyboard.TargetProperty="ScaleY" To="1" Duration="0:0:0.10"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Button: rund, dezent Hover/Pressed -->
        <Style TargetType="Button">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Background" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="8,6"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Bd"
                         Background="{TemplateBinding Background}"
                         BorderBrush="{TemplateBinding BorderBrush}"
                         BorderThickness="{TemplateBinding BorderThickness}"
                         CornerRadius="{DynamicResource Radius}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Surface}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentDark}"/>
                                <Setter Property="Foreground" Value="White"/>
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentDark}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Icon-Button (z.B. Lupe) -->
        <Style x:Key="IconButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Padding" Value="6"/>
            <Setter Property="Width" Value="32"/>
            <Setter Property="Height" Value="32"/>
        </Style>

        <!-- CheckBox dunkel -->
        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
        </Style>

        <!-- TextBox dunkel -->
        <Style TargetType="TextBox">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Background" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="6,4"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border x:Name="Bd"
                         Background="{TemplateBinding Background}"
                         BorderBrush="{TemplateBinding BorderBrush}"
                         BorderThickness="{TemplateBinding BorderThickness}"
                         CornerRadius="{DynamicResource Radius}">
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Accent}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- ListBox dunkel + dezente Auswahl -->
        <Style TargetType="ListBox">
            <Setter Property="Background" Value="{DynamicResource SurfaceAlt}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
        </Style>
        <Style TargetType="ListBoxItem">
            <Setter Property="Padding" Value="6,4"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border x:Name="Bd" CornerRadius="6" Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="4,2"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="#264FC3F7"/>
                                <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="#1AFFFFFF"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Log/TextBox Multiline -->
        <Style TargetType="{x:Type ScrollViewer}">
            <Setter Property="Background" Value="Transparent"/>
        </Style>

        <!-- Card-Container zum Wiederverwenden -->
        <Style x:Key="Card" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource Surface}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="{DynamicResource Radius}"/>
            <Setter Property="Padding" Value="12"/>
        </Style>

        <!-- Abschnittstitel -->
        <Style x:Key="SectionTitle" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Margin" Value="0,0,0,8"/>
        </Style>

        </Application.Resources>
</Application>
